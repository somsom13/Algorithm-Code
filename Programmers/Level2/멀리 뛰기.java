class Solution {
    public long solution(int n) {
        //Dynamic Programming 문제
        //1칸을 가는 경우: 방법 1가지
        //2칸: 1칸 또는 2칸 -> 2가지
        //3칸: 1칸 후 2칸 -> 2가지, 2칸 모두 뛴 후 한 칸 -> 1가지 => 3가지
        //4칸: 한 번에 1칸, 2칸 밖에 못뛰기 때문에 3칸 후 1칸 or 2칸 후 2칸 -> 3칸을 가는 경우의 수 + 2칸을 가는 경우의 수
        //5칸: 3칸 후 2칸 or 4칸 후 1칸 -> 3칸의 경우의 수 + 4칸의 경우의 수
        //n칸: (n-1)칸 + (n-2)칸의 경우의 수
        //n이 커지면 int 범위를 넘어갈 수 있음 -> ((n-1)칸+(n-2)칸)%1234567 = (n-1칸%1234567)+(n-2칸%1234567)의 성질을 활용, 각 칸에 경우의 수를 1234567로 나눈 값을 저장해주자!

        long[] arr=new long[n+1];
        for(int i=1;i<=n;i++){
            if(i<=3){
                arr[i]=i;
            }else{
                arr[i]=arr[i-1]%1234567+arr[i-2]%1234567;
            }
        }
        return arr[n]%1234567;
    }
}